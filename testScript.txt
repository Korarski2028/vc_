from flask import Flask, request, render_template_string
import subprocess
import os
import sys
import datetime

app = Flask(__name__, static_folder='static')

# --- Platform specific configuration ---
if sys.platform == "win32":
    base_folder = "C:\\temp"
    powershell_executable = "powershell.exe"
else:
    base_folder = "/tmp"
    powershell_executable = "pwsh"

log_folder = os.path.join(base_folder, "Log")
input_folder = os.path.join(base_folder, "Input")
static_folder_path = os.path.join(base_folder, "static")
scripts_file = os.path.join(base_folder, "Scripts.txt")
user_list_file = os.path.join(static_folder_path, "_.txt")

def log_event(log_file, message):
    """Appends a timestamped message to the specified log file."""
    with open(log_file, "a") as f:
        f.write(f"{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - {message}\n")

@app.route("/")
def login_form(error_message=None):
    return render_template_string('''
        <style>
            body {
                font-family: sans-serif;
                background-color: #f2f2f2;
            }
            h1 {
                text-align: center;
                color: #016fd0;
            }
            .form-container {
                display: flex;
                justify-content: center;
                align-items: center;
            }
            form {
                background-color: #ffffff;
                border: 1px solid #dddddd;
                padding: 20px;
                width: 300px;
                margin-top: 20px;
            }
            input[type=text], input[type=password] {
                width: 100%;
                padding: 12px 20px;
                margin: 8px 0;
                display: inline-block;
                border: 1px solid #ccc;
                box-sizing: border-box;
            }
            input[type=submit] {
                background-color: #016fd0;
                color: white;
                padding: 14px 20px;
                margin: 8px 0;
                border: none;
                cursor: pointer;
                width: 100%;
            }
        </style>
        <div style="text-align: center;">
            <img id="logo" src="/static/logo.png" alt="logo">
        </div>
        <h1 id="title">Vmware Infra Script Tool</h1>
        {% if error_message %}
            <p style="color: red; text-align: center;">{{ error_message }}</p>
        {% endif %}
        <div class="form-container">
            <form id="login-form" action="/login" method="post">
                <label for="username">Username:</label><br>
                <input type="text" id="username" name="username"><br>
                <label for="password">Password:</label><br>
                <input type="password" id="password" name="password"><br><br>
                <input type="submit" value="Submit">
            </form>
            <img id="logo2" src="/static/logo2.png" alt="logo2" style="margin-left: 20px;">
        </div>
        <script>
            window.onload = function() {
                var h1 = document.getElementById('title');
                var img = document.getElementById('logo');
                img.style.width = h1.offsetWidth + 'px';

                var form = document.getElementById('login-form');
                var img2 = document.getElementById('logo2');
                img2.style.height = form.offsetHeight + 'px';
            };
        </script>
    ''', error_message=error_message)

@app.route("/login", methods=["POST"])
def login():
    username = request.form["username"]
    password = request.form["password"]

    # --- Temporal user validation block ---
    with open(user_list_file, "r") as f:
        allowed_users = [line.strip() for line in f]
    if username not in allowed_users:
        return login_form(error_message="Invalid username.")
    # --- End of temporal user validation block ---

    # For now, just print the credentials to the console
    print(f"Username: {username}, Password: {'*' * len(password)}")

    if not os.path.exists(log_folder):
        os.makedirs(log_folder)
    
    log_filename = f"{username}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
    log_file_path = os.path.join(log_folder, log_filename)
    log_event(log_file_path, f"User '{username}' logged in.")

    with open(scripts_file, "r") as f:
        scripts = f.read().splitlines()

    return render_template_string('''
        <style>
            body {
                font-family: sans-serif;
                background-color: #f2f2f2;
            }
            h1 {
                text-align: center;
                color: #016fd0;
            }
            form {
                background-color: #ffffff;
                border: 1px solid #dddddd;
                padding: 20px;
                width: 400px;
                margin: 0 auto;
                margin-top: 20px;
            }
            input[type=text], textarea, select {
                width: 100%;
                padding: 12px 20px;
                margin: 8px 0;
                display: inline-block;
                border: 1px solid #ccc;
                box-sizing: border-box;
            }
            input[type=submit] {
                background-color: #016fd0;
                color: white;
                padding: 14px 20px;
                margin: 8px 0;
                border: none;
                cursor: pointer;
                width: 100%;
            }
            .adhoc-button {
                background-color: #008CBA;
                color: white;
                padding: 5px 10px;
                border: none;
                cursor: pointer;
            }
        </style>
        <h1>Vmware Infra Script Tool</h1>
        <form action="/execute" method="post">
            <input type="hidden" id="username" name="username" value="{{ username }}">
            <input type="hidden" id="log_filename" name="log_filename" value="{{ log_filename }}">
            <label for="vcenter_name">vCenter Name:</label><br>
            <input type="text" id="vcenter_name" name="vcenter_name">
            <button type="button" class="adhoc-button" onclick="addAdhocScript('vcenter_name')">Add-Hoc-Script</button><br><br>
            <label for="cluster_name">Cluster Name:</label><br>
            <input type="text" id="cluster_name" name="cluster_name">
            <button type="button" class="adhoc-button" onclick="addAdhocScript('cluster_name')">Add-Hoc-Script</button><br><br>
            <label for="server_list">Please enter server list:</label><br>
            <textarea id="server_list" name="server_list" rows="4" cols="50"></textarea>
            <button type="button" class="adhoc-button" onclick="addAdhocScript('server_list')">Add-Hoc-Script</button><br><br>
            
            <div id="adhoc-script-container"></div>

            <label for="script">Select a script:</label><br>
            <select id="script" name="script">
                {% for script in scripts %}
                <option value="{{ script }}">{{ script }}</option>
                {% endfor %}
            </select><br><br>
            
            <input type="submit" value="Send">
        </form>

        <script>
            function addAdhocScript(target) {
                const container = document.getElementById('adhoc-script-container');
                const existingTextarea = document.getElementById('adhoc_script');
                if (existingTextarea) {
                    return;
                }

                const textarea = document.createElement('textarea');
                textarea.id = 'adhoc_script';
                textarea.name = 'adhoc_script';
                textarea.rows = '10';
                textarea.cols = '50';
                textarea.placeholder = 'Paste your ad-hoc script here';
                
                const sendButton = document.createElement('button');
                sendButton.type = 'submit';
                sendButton.name = 'adhoc_submit';
                sendButton.value = 'send';
                sendButton.className = 'adhoc-button';
                sendButton.textContent = 'Send-Adhoc';

                container.appendChild(textarea);
                container.appendChild(sendButton);
            }
        </script>
    ''', scripts=scripts, username=username, log_filename=log_filename)



@app.route("/execute", methods=["POST"])
def execute():
    username = request.form.get("username")
    log_filename = request.form.get("log_filename")
    vcenter_name = request.form["vcenter_name"]
    cluster_name = request.form["cluster_name"]
    server_list = request.form["server_list"]
    script_name = request.form.get("script")
    adhoc_script = request.form.get("adhoc_script")
    adhoc_submit = request.form.get("adhoc_submit")

    log_file_path = os.path.join(log_folder, log_filename)
    log_event(log_file_path, f"Executing script: {script_name or 'ad-hoc'}")

    if not os.path.exists(input_folder):
        os.makedirs(input_folder)

    if username:
        username_file = os.path.join(input_folder, f"Username_{username}.txt")
        vcenter_file = os.path.join(input_folder, f"vCenter_{username}.txt")
        cluster_file = os.path.join(input_folder, f"Cluster_{username}.txt")
        server_list_file = os.path.join(input_folder, f"Server_list_{username}.txt")
    else:
        username_file = os.path.join(input_folder, "Username.txt")
        vcenter_file = os.path.join(input_folder, "vCenter.txt")
        cluster_file = os.path.join(input_folder, "Cluster.txt")
        server_list_file = os.path.join(input_folder, "Server_list.txt")

    with open(username_file, "w") as f:
        f.write(username if username else "")

    with open(vcenter_file, "w") as f:
        f.write(vcenter_name)
        
    with open(cluster_file, "w") as f:
        f.write(cluster_name)
        
    with open(server_list_file, "w") as f:
        f.write(server_list)
    
    script_path = ""
    if adhoc_submit:
        script_path = os.path.join(base_folder, f"ad-hoc_{username}.ps1" if username else "ad-hoc.ps1")
        with open(script_path, "w") as f:
            f.write(adhoc_script)
        script_name = os.path.basename(script_path)
    elif adhoc_script:
        script_path = os.path.join(base_folder, f"adhoc_script_{username}.ps1" if username else "adhoc_script.ps1")
        with open(script_path, "w") as f:
            f.write(adhoc_script)
        script_name = os.path.basename(script_path)
    else:
        script_path = os.path.join(base_folder, script_name)
    
    try:
        powershell_command = [powershell_executable, "-File", script_path]
        if username:
            powershell_command.extend(["-Username", username])
        if vcenter_name:
            powershell_command.extend(["-vCenter", vcenter_file])
        if cluster_name:
            powershell_command.extend(["-Cluster", cluster_file])
        if server_list:
            powershell_command.extend(["-Target", server_list_file])
            
        print(f"Executing command: {powershell_command}")
        result = subprocess.run(powershell_command, capture_output=True, text=True)
        output = result.stdout + result.stderr
        
        with open(scripts_file, "r") as f:
            scripts = f.read().splitlines()

        return render_template_string('''
            <style>
                body {
                    font-family: sans-serif;
                    background-color: #f2f2f2;
                }
                h1 {
                    text-align: center;
                    color: #016fd0;
                }
                form {
                    background-color: #ffffff;
                    border: 1px solid #dddddd;
                    padding: 20px;
                    width: 400px;
                    margin: 0 auto;
                    margin-top: 20px;
                }
                input[type=text], textarea, select {
                    width: 100%;
                    padding: 12px 20px;
                    margin: 8px 0;
                    display: inline-block;
                    border: 1px solid #ccc;
                    box-sizing: border-box;
                }
                input[type=submit] {
                    background-color: #016fd0;
                    color: white;
                    padding: 14px 20px;
                    margin: 8px 0;
                    border: none;
                    cursor: pointer;
                    width: 100%;
                }
                textarea#output {
                    background-color: black;
                    color: white;
                    font-family: monospace;
                    font-size: 1.2em;
                    height: 300px;
                }
            </style>
            <h1>Vmware Infra Script Tool</h1>
            <form action="/execute" method="post">
                <input type="hidden" id="username" name="username" value="{{ username }}">
                <input type="hidden" id="log_filename" name="log_filename" value="{{ log_filename }}">
                <label for="vcenter_name">vCenter Name:</label><br>
                <input type="text" id="vcenter_name" name="vcenter_name" value="{{ vcenter_name }}"><br><br>
                <label for="cluster_name">Cluster Name:</label><br>
                <input type="text" id="cluster_name" name="cluster_name" value="{{ cluster_name }}"><br><br>
                <label for="server_list">Please enter server list:</label><br>
                <textarea id="server_list" name="server_list" rows="4" cols="50">{{ server_list }}</textarea><br><br>
                
                <div id="adhoc-script-container">
                    {% if adhoc_script %}
                    <textarea id="adhoc_script" name="adhoc_script" rows="10" cols="50">{{ adhoc_script }}</textarea>
                    {% endif %}
                </div>

                <label for="script">Select a script:</label><br>
                <select id="script" name="script">
                    {% for script in scripts %}
                    <option value="{{ script }}" {% if script == selected_script %}selected{% endif %}>{{ script }}</option>
                    {% endfor %}
                </select><br><br>
                
                <input type="submit" value="Send">
            </form>
            <br>
            <textarea id="output" readonly>{{ output }}</textarea>
            <br>
            <button id="copy-button">Copy to Clipboard</button>
            <button id="clear-button">Clear Console</button>
            <button id="open-output-button">Open Output Folder</button>
            <button id="quit-button" style="font-weight: bold; color: red; margin-left: 0.5in;">Quit</button>

            <script>
                document.getElementById("copy-button").addEventListener("click", function() {
                    const outputText = document.getElementById("output").value;
                    navigator.clipboard.writeText(outputText).then(function() {
                        const button = document.getElementById("copy-button");
                        button.textContent = "Copied!";
                        setTimeout(function() {
                            button.textContent = "Copy to Clipboard";
                        }, 2000);
                    }, function(err) {
                        console.error("Could not copy text: ", err);
                    });
                });

                document.getElementById("clear-button").addEventListener("click", function() {
                    document.getElementById("output").value = "";
                });

                document.getElementById("open-output-button").addEventListener("click", function() {
                    fetch('/open-output');
                });

                document.getElementById("quit-button").addEventListener("click", function() {
                    fetch('/quit?username={{ username }}&log_filename={{ log_filename }}')
                        .then(() => {
                            window.location.href = "/";
                        });
                });
            </script>
        ''', vcenter_name=vcenter_name, cluster_name=cluster_name, server_list=server_list, scripts=scripts, selected_script=script_name, output=output, adhoc_script=adhoc_script, username=username, log_filename=log_filename)

    except Exception as e:
        print(f"Error starting script: {e}")
        return f"Error starting script: {e}"
    finally:
        if adhoc_script and "adhoc_script" in script_path and os.path.exists(script_path):
            os.remove(script_path)
        if adhoc_submit and "ad-hoc" in script_path and os.path.exists(script_path):
            os.remove(script_path)

@app.route('/quit')
def quit_app():
    username = request.args.get('username')
    log_filename = request.args.get('log_filename')
    if log_filename:
        log_file_path = os.path.join(log_folder, log_filename)
        log_event(log_file_path, f"User '{username}' logged out.")
    if username:
        username_file = os.path.join(input_folder, f"Username_{username}.txt")
        if os.path.exists(username_file):
            os.remove(username_file)
    return ('', 204)

@app.route('/open-output')
def open_output_folder():
    output_path = os.path.join(base_folder, 'output')
    if not os.path.exists(output_path):
        os.makedirs(output_path)

    if sys.platform == 'win32':
        subprocess.run(['explorer', output_path])
    elif sys.platform == 'darwin': # macOS
        subprocess.run(['open', output_path])
    else: # Linux and other Unix-like
        try:
            subprocess.run(['xdg-open', output_path])
        except FileNotFoundError:
            # Fallback for systems without xdg-open
            return "Could not open output folder.", 500
            
    return ('', 204)

if __name__ == "__main__":
        app.run(debug=True)