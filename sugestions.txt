 ###  This is not a script just pieces of code with ideas to test but are not executable or working 
 ###  This safe and for lab use    
 249   ### My notes: Store session and log event ###
 250 + sanitized_username = username.replace('\\', '_')
 251   session['username'] = username
 251 - log_filename = f"{username}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
 252 + session['sanitized_username'] = sanitized_username
 253 + log_filename = f"{sanitized_username}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
 254   session['log_file'] = os.path.join(LOG_DIR, log_filename)
 255 +
 256 + # Create the log directory if it doesn't exist
 257 + os.makedirs(os.path.dirname(session['log_file']), exist_ok=True)
 258   log_event(session['log_file'], f"User '{username}' ({login_type}) logged in successfully.")
 259
 260   ### My notes: Save main user credentials ###
 256 - password_file_path = os.path.join(SEC_DIR, f"{username}.xml")
 261 + password_file_path = os.path.join(SEC_DIR, f"{sanitized_username}.xml")
 262   powershell_command = [
 263       "powershell.exe", "-ExecutionPolicy", "Bypass", "-File", SCREDS_SCRIPT_PATH,
 264       "-Username", username, "-Password", password, "-FilePath", password_file_path,
 
 
 
 306   ### fix creds to import xml 
 307   cred_type = request.form['cred_type']
 308   password = request.form['password']
 309   username = session['username']
 310 + sanitized_username = session['sanitized_username']
 311   static_user = ""
 312   output_filename = ""
 313
 314   if cred_type == 'pe_admin':
 315       static_user = 'admin'
 315 -     output_filename = f"{username}_cvm.xml"
 316 +     output_filename = f"{sanitized_username}_cvm.xml"
 317   elif cred_type == 'ssh_nutanix':
 318       static_user = 'nutanix'
 318 -     output_filename = f"{username}_nutanix.xml"
 319 +     output_filename = f"{sanitized_username}_nutanix.xml"
 320   else:
 321       # Should not happen with the current form
 322       return redirect(url_for('main_page'))
 
 
366       log_event(session['log_file'], f"Executing script: '{script_path}' for user '{username}'.")
367
368       if os.path.exists(script_path):
368 -         cred_file_path = os.path.join(SEC_DIR, f"{username}.xml")
369 +         cred_file_path = os.path.join(SEC_DIR, f"{sanitized_username}.xml")
370           powershell_command = ["powershell.exe", "-ExecutionPolicy", "Bypass", "-File", script_path, "-Username", username, "-Target", server_list_file, "-CredFilePath", cred_file_path]
371           try:
372               result = subprocess.run(powershell_command, capture_output=True, text=True, creationflags=subprocess.CREATE_NO_WINDOW)


 391       return redirect(url_for('login_form_route'))
 392
 393   username = session['username']
 394 + sanitized_username = session['sanitized_username']
 395   adhoc_script_content = request.form["adhoc_script"]
 396   server_list = session.get('server_list', '') # Get server_list from session
 397
 398   # Define script path
 398 - adhoc_script_name = f"{username}_adhoc.ps1"
 399 + adhoc_script_name = f"{sanitized_username}_adhoc.ps1"
 400   adhoc_script_path = os.path.join(SCRIPTS_DIR, adhoc_script_name)
 401
 402   # Write ad-hoc script to file
 405   log_event(session['log_file'], f"Ad-hoc script for user '{username}' saved to '{adhoc_script_path}'.")
 406
 407   # Get server list file path
 407 - server_list_file = os.path.join(INPUT_DIR, f"{username}_serverlist.txt")
 408 + server_list_file = os.path.join(INPUT_DIR, f"{sanitized_username}_serverlist.txt")
 409
 410   # Check if server list file exists
 411   if not os.path.exists(server_list_file):
 
 439   """Logs out the user, clears session, and deletes their credential files."""
 440   if 'username' in session:
 441       username = session['username']
 442 +     sanitized_username = session['sanitized_username']
 443       log_event(session['log_file'], f"User '{username}' logged out.")
 444
 445       # Delete all user-specific .xml files from the sec directory
 445 -     files_to_delete = glob.glob(os.path.join(SEC_DIR, f"{username}*.xml"))
 446 +     files_to_delete = glob.glob(os.path.join(SEC_DIR, f"{sanitized_username}*.xml"))
 447       for f_path in files_to_delete:
 448           try:
 449               os.remove(f_path)
 
 368   if os.path.exists(script_path):
 369 +     powershell_command = ["powershell.exe", "-ExecutionPolicy", "Bypass", "-File", script_path, "-Username", username, "-Target", server_list_file]
 370 +
 371 +     # Add main credential file path
 372       cred_file_path = os.path.join(SEC_DIR, f"{sanitized_username}.xml")
 370 -     powershell_command = ["powershell.exe", "-ExecutionPolicy", "Bypass", "-File", script_path, "-Username", username, "-Target", server_list_file, "-CredFilePath", cred_file_path]
 373 +     if os.path.exists(cred_file_path):
 374 +         powershell_command.extend(["-CredFilePath", cred_file_path])
 375 +
 376 +     # Add CVM credential file path if it exists
 377 +     cvm_cred_file_path = os.path.join(SEC_DIR, f"{sanitized_username}_cvm.xml")
 378 +     if os.path.exists(cvm_cred_file_path):
 379 +         powershell_command.extend(["-CvmCredFilePath", cvm_cred_file_path])
 380 +
 381 +     # Add Nutanix credential file path if it exists
 382 +     nutanix_cred_file_path = os.path.join(SEC_DIR, f"{sanitized_username}_nutanix.xml")
 383 +     if os.path.exists(nutanix_cred_file_path):
 384 +         powershell_command.extend(["-NutanixCredFilePath", nutanix_cred_file_path])
 385 +
 386       try:
 387           result = subprocess.run(powershell_command, capture_output=True, text=True, creationflags=subprocess.CREATE_NO_WINDOW)
 388           output += f"###  Output for {script_name} ### \n"
 
 ###  PS suggestions to improve ping test 
 
# This script pings a list of servers from a file.
# The path to the file is passed as the -Target parameter.

param (
    [string]$Target,
    [string]$Username,
    [string]$CredFilePath,
    [string]$CvmCredFilePath,
    [string]$NutanixCredFilePath
)

# Read the server names from the file path provided by the -Target parameter
try {
    $Servers = Get-Content -Path $Target -ErrorAction Stop
}
catch {
    Write-Output "Error reading file: $Target"
    Write-Output $_.Exception.Message
    exit 1
}

if (-not [string]::IsNullOrWhiteSpace($CredFilePath)) {
    $Credential = Import-CliXml -Path $CredFilePath
}

if (-not [string]::IsNullOrWhiteSpace($CvmCredFilePath)) {
    $cvm_credentials = Import-CliXml -Path $CvmCredFilePath
}

if (-not [string]::IsNullOrWhiteSpace($NutanixCredFilePath)) {
    $nutanix_credentials = Import-CliXml -Path $NutanixCredFilePath
}

# Loop through each server and ping it
foreach ($Server in $Servers) {
    if (-not [string]::IsNullOrWhiteSpace($Server)) {
        Write-Output "Pinging $Server..."
        # Test the connection to the server
        # -Count 1 sends a single ping packet
        if (Test-Connection -ComputerName $Server -Count 1 -Quiet -ErrorAction SilentlyContinue) {
            Write-Output "$Server is UP"
        } else {
            Write-Output "$Server is DOWN"
        }
    }
}

$Credential

 ###################
 