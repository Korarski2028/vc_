
import os
import sys
import datetime
import subprocess
from flask import Flask, request, render_template_string, redirect, url_for, session
from ldap3 import Server, Connection, ALL
import glob

### My notes: Configuration and Setup ### 
BASE_DIR = 'C:\\Webauto'
LOG_DIR = os.path.join(BASE_DIR, 'log')
INPUT_DIR = os.path.join(BASE_DIR, 'input')
STATIC_DIR = os.path.join(BASE_DIR, 'static')
OUTPUT_DIR = os.path.join(BASE_DIR, 'output')
SEC_DIR = os.path.join(BASE_DIR, 'sec')
SCRIPTS_DIR = os.path.join(BASE_DIR, 'scripts')
SCRIPTS_LIST_FILE = os.path.join(BASE_DIR, 'scripts.txt')
SCREDS_SCRIPT_PATH = os.path.join(SCRIPTS_DIR, 'save-credentials.ps1')

### My notes: App Initialization ### 
app = Flask(__name__, static_folder=STATIC_DIR)
app.secret_key = os.urandom(24) # Needed for session management

def setup_directories():
    """Creates the necessary directory structure for the application."""
    for path in [BASE_DIR, LOG_DIR, INPUT_DIR, STATIC_DIR, OUTPUT_DIR, SEC_DIR, SCRIPTS_DIR]:
        if not os.path.exists(path):
            os.makedirs(path)
            print(f"Created directory: {path}")

def log_event(log_file, message):
    """Appends a timestamped message to the specified log file."""
    with open(log_file, "a") as f:
        f.write(f"{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - {message}\n")

### My notes: Page Templates ### 

LOGIN_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>Vmware Infra Script Tool - Login</title>
    <style>
        body { font-family: sans-serif; background-color: #f2f2f2; display: flex; justify-content: center; align-items: center; height: 100vh; margin: 0; }
        .container { display: flex; flex-direction: column; align-items: center; }
        h1 { text-align: center; color: #016fd0; }
        .form-wrapper { display: flex; align-items: flex-start; }
        form { background-color: #ffffff; border: 1px solid #dddddd; padding: 20px; width: 300px; margin-top: 20px; }
        input[type=text], input[type=password] { width: 100%; padding: 12px 20px; margin: 8px 0; display: inline-block; border: 1px solid #ccc; box-sizing: border-box; }
        input[type=submit] { background-color: #016fd0; color: white; padding: 14px 20px; margin: 8px 0; border: none; cursor: pointer; width: 100%; }
        .logo { max-width: 340px; margin-bottom: 10px; }
        .logo-side { max-height: 180px; margin-left: 20px; margin-top: 20px;}
        .error { color: red; text-align: center; }
    </style>
</head>
<body>
    <div class="container">
        <img src="{{ url_for('static', filename='logo.png') }}" alt="logo" class="logo">
        <h1>Vmware Infra Script Tool</h1>
        {% if error_message %}
            <p class="error">{{ error_message }}</p>
        {% endif %}
        <div class="form-wrapper">
            <form action="/login" method="post">
                <label for="username">Username:</label><br>
                <input type="text" id="username" name="username" required><br>
                <label for="password">Password:</label><br>
                <input type="password" id="password" name="password" required><br><br>
                <input type="submit" value="Send">
            </form>
            <img src="{{ url_for('static', filename='logo2.png') }}" alt="logo2" class="logo-side">
        </div>
    </div>
</body>
</html>
"""

MAIN_TEMPLATE = r"""
<!DOCTYPE html>
<html>
<head>
    <title>Vmware Infra Script Tool</title>
    <style>
        body { font-family: sans-serif; background-color: #f2f2f2; }
        h1 { text-align: center; color: #016fd0; }
        .main-container { display: flex; justify-content: center; }
        .content-wrapper { background-color: #ffffff; border: 1px solid #dddddd; padding: 20px; width: 95%; max-width: 1200px; margin-top: 20px; }
        .form-grid { display: grid; grid-template-columns: auto auto; gap: 40px; }
        .form-section, .script-section { display: flex; flex-direction: column; }
        label { margin-bottom: 5px; }
        input[type=password], textarea, select { width: 100%; padding: 10px; margin-bottom: 10px; border: 1px solid #ccc; box-sizing: border-box; }
        .save-button { background-color: #016fd0; color: white; padding: 10px; border: none; cursor: pointer; align-self: flex-start; }
        .send-button { background-color: #016fd0; color: white; padding: 14px 20px; margin-top: 10px; border: none; cursor: pointer; width: 100%; }
        #output { background-color: black; color: #00ff00; font-family: monospace; height: 400px; width: 100%; box-sizing: border-box; margin-top: 20px; }
        .bottom-buttons { margin-top: 10px; display: flex; justify-content: space-between; align-items: center; }
        .bottom-buttons .group-left button { margin-right: 10px; }
        .action-button { background-color: #016fd0; color: white; padding: 10px 15px; border: none; cursor: pointer; }
        #quit-button { background-color: #f44336; }
    </style>
</head>
<body>
    <h1>Vmware Infra Script Tool</h1>
    <div class="main-container">
        <div class="content-wrapper">
            <div class="form-grid">
                <div class="form-section">
                    <form action="/save_cred" method="post">
                        <input type="hidden" name="cred_type" value="pe_admin">
                        <label for="pe_admin">PE Admin Credentials (user: admin):</label>
                        <input type="password" id="pe_admin" name="password">
                        <button type="submit" class="save-button">Save</button>
                    </form>
                    <form action="/save_cred" method="post" style="margin-top: 20px;">
                        <input type="hidden" name="cred_type" value="ssh_nutanix">
                        <label for="ssh_nutanix">Nutanix Ssh credentials (user: nutanix):</label>
                        <input type="password" id="ssh_nutanix" name="password">
                        <button type="submit" class="save-button">Save</button>
                    </form>
                </div>
                <div class="script-section">
                    <form action="/execute" method="post">
                        <label for="server_list">Please enter Server | Cluster | vCenter as needed:</label>
                        <textarea id="server_list" name="server_list" rows="5">{{ server_list or '' }}</textarea>
                        <label for="script">Select a script:</label>
                        <select id="script" name="script">
                            <option value="">-- None --</option>
                            {% for script in scripts %}
                            <option value="{{ script }}" {% if script == selected_script %}selected{% endif %}>{{ script }}</option>
                            {% endfor %}
                        </select>
                        <button type="submit" class="send-button">Send</button>
                    </form>
                </div>
            </div>
            <div id="adhoc-section" style="display: none; margin-top: 20px;">
                <form action="/execute_adhoc" method="post">
                    <label for="adhoc_script">Enter your ad-hoc PowerShell script:</label>
                    <textarea id="adhoc_script" name="adhoc_script" rows="10" style="width: 100%; box-sizing: border-box;"></textarea>
                    <button type="submit" class="send-button" style="margin-top: 10px;">Send Ad-hoc Script</button>
                </form>
            </div>
            <textarea id="output" readonly>{{ output or '' }}</textarea>
            <div class="bottom-buttons">
                <div class="group-left">
                    <button id="copy-button" class="action-button">Copy to Clipboard</button>
                    <button id="clear-button" class="action-button">Clear Console</button>
                    <button id="open-output-button" class="action-button">Open Output</button>
                    <button id="adhoc-button" class="action-button" style="display: none;">Ad-hoc Script</button>
                </div>
                <button id="quit-button" class="action-button">Quit</button>
            </div>
        </div>
    </div>

    <script>
        document.getElementById("copy-button").addEventListener("click", function() {
            const outputText = document.getElementById("output").value;
            navigator.clipboard.writeText(outputText).then(() => {
                this.textContent = "Copied!";
                setTimeout(() => { this.textContent = "Copy to Clipboard"; }, 2000);
            }, (err) => console.error("Could not copy text: ", err));
        });

        document.getElementById("clear-button").addEventListener("click", () => {
            document.getElementById("output").value = "";
        });

        document.getElementById("open-output-button").addEventListener("click", () => fetch('/open-output'));

        document.getElementById("quit-button").addEventListener("click", () => {
            fetch('/quit').then(() => window.location.href = "/");
        });

        const serverListTextArea = document.getElementById("server_list");
        const adhocButton = document.getElementById("adhoc-button");
        const adhocSection = document.getElementById("adhoc-section");

        function updateAdhocButtonVisibility() {
            if (serverListTextArea.value.trim() !== "") {
                adhocButton.style.display = "inline-block";
            } else {
                adhocButton.style.display = "none";
                adhocSection.style.display = "none";
            }
        }

        serverListTextArea.addEventListener("input", updateAdhocButtonVisibility);

        // Check on page load
        updateAdhocButtonVisibility();

        adhocButton.addEventListener("click", function() {
            adhocSection.style.display = (adhocSection.style.display === "none") ? "block" : "none";
        });
    </script>"
</body>
</html>
"""

### My notes: Routes ### 

@app.route("/")
def login_form_route():
    """Displays the login form."""
    return render_template_string(LOGIN_TEMPLATE)

@app.route("/login", methods=["POST"])
def login():
    """Handles user login, LDAP authentication, and credential saving."""
    username = request.form["username"]
    password = request.form["password"]
    
    ### My notes: LDAP Authentication ### 
    LDAP_SERVER = 'ldap.forumsys.com'
    user_dn = f"uid={username},dc=example,dc=com"
    server = Server(LDAP_SERVER, get_info=ALL)
    try:
        conn = Connection(server, user=user_dn, password=password, auto_bind=True)
        if not conn.bind():
            return render_template_string(LOGIN_TEMPLATE, error_message="Invalid username or password.")
    except Exception as e:
        return render_template_string(LOGIN_TEMPLATE, error_message=f"LDAP connection error: {e}")
    finally:
        if 'conn' in locals() and conn.bound:
            conn.unbind()

    ### My notes: Store session and log event ### 
    session['username'] = username
    log_filename = f"{username}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
    session['log_file'] = os.path.join(LOG_DIR, log_filename)
    log_event(session['log_file'], f"User '{username}' logged in successfully.")

    ### My notes: Save main user credentials ### 
    password_file_path = os.path.join(SEC_DIR, f"{username}.xml")
    powershell_command = [
        "powershell.exe", "-File", SCREDS_SCRIPT_PATH,
        "-Username", username, "-Password", password, "-FilePath", password_file_path,
    ]
    try:
        result = subprocess.run(powershell_command, capture_output=True, text=True, check=True)
        log_event(session['log_file'], f"Successfully saved main credentials for user '{username}' to '{password_file_path}'.")
        log_event(session['log_file'], f"Powershell output: {result.stdout}")
    except subprocess.CalledProcessError as e:
        log_event(session['log_file'], f"ERROR saving main credentials for user '{username}'. Stderr: {e.stderr}")

    return redirect(url_for('main_page'))

@app.route("/main")
def main_page():
    """Displays the main application page."""
    if 'username' not in session:
        return redirect(url_for('login_form_route'))
    
    try:
        with open(SCRIPTS_LIST_FILE, "r") as f:
            scripts = f.read().splitlines()
    except FileNotFoundError:
        scripts = []
        log_event(session['log_file'], f"WARNING: '{SCRIPTS_LIST_FILE}' not found.")

    # Retrieve state from session to repopulate form
    output = session.pop('output', '')
    server_list = session.pop('server_list', '')
    selected_script = session.pop('selected_script', '')

    return render_template_string(
        MAIN_TEMPLATE,
        scripts=scripts,
        output=output,
        server_list=server_list,
        selected_script=selected_script
    )

@app.route("/save_cred", methods=["POST"])
def save_cred():
    """Saves PE Admin or Nutanix credentials."""
    if 'username' not in session:
        return redirect(url_for('login_form_route'))

    cred_type = request.form['cred_type']
    password = request.form['password']
    username = session['username']
    static_user = ""
    output_filename = ""

    if cred_type == 'pe_admin':
        static_user = 'admin'
        output_filename = f"{username}_cvm.xml"
    elif cred_type == 'ssh_nutanix':
        static_user = 'nutanix'
        output_filename = f"{username}_nutanix.xml"
    else:
        # Should not happen with the current form
        return redirect(url_for('main_page'))

    password_file_path = os.path.join(SEC_DIR, output_filename)
    log_event(session['log_file'], f"Attempting to save '{cred_type}' credentials for user '{username}' with static user '{static_user}'.")
    
    powershell_command = [
        "powershell.exe", "-File", SCREDS_SCRIPT_PATH,
        "-Username", static_user, "-Password", password, "-FilePath", password_file_path,
    ]
    try:
        result = subprocess.run(powershell_command, capture_output=True, text=True, check=True)
        log_event(session['log_file'], f"Successfully saved '{cred_type}' credentials. Powershell output: {result.stdout}")
    except subprocess.CalledProcessError as e:
        log_event(session['log_file'], f"ERROR saving '{cred_type}' credentials. Stderr: {e.stderr}")

    return redirect(url_for('main_page'))


@app.route("/execute", methods=["POST"])
def execute():
    """Handles writing server list and executing the selected PowerShell script."""
    if 'username' not in session:
        return redirect(url_for('login_form_route'))

    username = session['username']
    server_list = request.form["server_list"]
    script_name = request.form.get("script")

    # Save form state in session
    session['server_list'] = server_list
    session['selected_script'] = script_name

    # Write server list to file
    server_list_file = os.path.join(INPUT_DIR, f"{username}_serverlist.txt")
    with open(server_list_file, "w") as f:
        f.write(server_list)
    log_event(session['log_file'], f"Server list for user '{username}' saved to '{server_list_file}'.")

    output = f"Server list saved to {server_list_file}\n"

    # Execute script if one was selected
    if script_name:
        script_path = os.path.join(SCRIPTS_DIR, script_name)
        log_event(session['log_file'], f"Executing script: '{script_path}' for user '{username}'.")
        
        if os.path.exists(script_path):
            powershell_command = ["powershell.exe", "-File", script_path, "-Username", username, "-Target", server_list_file]
            try:
                result = subprocess.run(powershell_command, capture_output=True, text=True, creationflags=subprocess.CREATE_NO_WINDOW)
                output += f"###  Output for {script_name} ### \n"
                output += result.stdout
                output += result.stderr
                log_event(session['log_file'], f"Script '{script_name}' executed. Return code: {result.returncode}.")
            except Exception as e:
                output += f"Error executing script: {e}"
                log_event(session['log_file'], f"ERROR executing script '{script_name}': {e}")
        else:
            output += f"ERROR: Script file not found at '{script_path}'"
            log_event(session['log_file'], f"ERROR: Script file not found at '{script_path}'")
    
    session['output'] = output
    return redirect(url_for('main_page'))

@app.route("/execute_adhoc", methods=["POST"])
def execute_adhoc():
    """Handles ad-hoc script saving and execution."""
    if 'username' not in session:
        return redirect(url_for('login_form_route'))

    username = session['username']
    adhoc_script_content = request.form["adhoc_script"]
    server_list = session.get('server_list', '') # Get server_list from session

    # Define script path
    adhoc_script_name = f"{username}_adhoc.ps1"
    adhoc_script_path = os.path.join(SCRIPTS_DIR, adhoc_script_name)

    # Write ad-hoc script to file
    with open(adhoc_script_path, "w") as f:
        f.write(adhoc_script_content)
    log_event(session['log_file'], f"Ad-hoc script for user '{username}' saved to '{adhoc_script_path}'.")

    # Get server list file path
    server_list_file = os.path.join(INPUT_DIR, f"{username}_serverlist.txt")

    # Check if server list file exists
    if not os.path.exists(server_list_file):
        # If not, create it from session
        with open(server_list_file, "w") as f:
            f.write(server_list)
        log_event(session['log_file'], f"Server list for user '{username}' created at '{server_list_file}'.")


    output = f"Ad-hoc script saved to {adhoc_script_path}\n"

    # Execute script
    log_event(session['log_file'], f"Executing ad-hoc script: '{adhoc_script_path}' for user '{username}'.")
    
    powershell_command = ["powershell.exe", "-File", adhoc_script_path, "-Username", username, "-Target", server_list_file]
    try:
        result = subprocess.run(powershell_command, capture_output=True, text=True, creationflags=subprocess.CREATE_NO_WINDOW)
        output += f"###  Output for {adhoc_script_name} ### \n"
        output += result.stdout
        output += result.stderr
        log_event(session['log_file'], f"Ad-hoc script '{adhoc_script_name}' executed. Return code: {result.returncode}.")
    except Exception as e:
        output += f"Error executing ad-hoc script: {e}"
        log_event(session['log_file'], f"ERROR executing ad-hoc script '{adhoc_script_name}': {e}")

    session['output'] = output
    return redirect(url_for('main_page'))

@app.route('/quit')
def quit_app():
    """Logs out the user, clears session, and deletes their credential files."""
    if 'username' in session:
        username = session['username']
        log_event(session['log_file'], f"User '{username}' logged out.")
        
        # Delete all user-specific .xml files from the sec directory
        files_to_delete = glob.glob(os.path.join(SEC_DIR, f"{username}*.xml"))
        for f_path in files_to_delete:
            try:
                os.remove(f_path)
                log_event(session['log_file'], f"Removed credential file: {f_path}")
            except OSError as e:
                log_event(session['log_file'], f"Error removing file {f_path}: {e}")

    session.clear()
    return ('', 204)

@app.route('/open-output')
def open_output_folder():
    """Opens the output folder in the default file explorer."""
    if sys.platform == 'win32':
        os.startfile(OUTPUT_DIR)
    elif sys.platform == 'darwin': # macOS
        subprocess.run(['open', OUTPUT_DIR])
    else: # Linux
        subprocess.run(['xdg-open', OUTPUT_DIR])
    return ('', 204)

if __name__ == "__main__":
    setup_directories()
    # To run in production, use a proper WSGI server instead of app.run()
    app.run(host='0.0.0.0', port=8081, debug=True)
